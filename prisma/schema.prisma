// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Order         Order[]
    Delivery      Delivery[]
    Order         Order[]
    Order         Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Item {
    id          String      @id @unique
    name        String
    description String
    price       Int
    category    String
    OrderItem   OrderItem[]
}

model OrderItem {
    id String @id @unique

    item     Item   @relation(fields: [itemId], references: [id])
    itemId   String
    quantity Int

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    @@index([orderId, itemId])
}

enum OrderStatus {
    PAYMENT_PENDING
    PAYMENT_FAILED
    PAYMENT_SUCCESS
    ORDER_ACCEPTED
    ORDER_REJECTED
    ORDER_CANCELLED
    DELIVERY_WAITING
    DELIVERY_PROCESSING
    DELIVERY_SUCCESSFUL
}

model Order {
    id                    String      @id @unique
    user                  User        @relation(name: "customer", fields: [userId], references: [id])
    userId                String
    type                  String
    price                 Int
    manager               User        @relation(name: "manager", fields: [managerId], references: [id])
    managerId             String
    timeCreated           DateTime    @default(now())
    timeStarted           DateTime
    estimatedDeliveryTime DateTime
    OrderItem             OrderItem[]
    status                OrderStatus
    Delivery              Delivery[]
    User                  User        @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Delivery {
    id               String @id @unique @default(dbgenerated("uuid_generate_v4()"))
    order            Order  @relation(fields: [orderId], references: [id])
    orderId          String
    user             User   @relation(fields: [deliveryPersonId], references: [id])
    deliveryPersonId String // need to add as fk
    deliveryStatus   String
}
